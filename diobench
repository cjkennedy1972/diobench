#!/usr/bin/env python3

import sys
import os
import json

from os import path

import argparse
import logzero
from logzero import logger
from logzero import logging

import random
import hashlib
import subprocess


# randomly select a buffer size from 1K --> 8K 
# write it read it, compare sigs and delete it. 
def hello_io(args):
    if len(args) < 1:
        return -1

    if len(args) >= 1:
        root = args[0]
        count = 1
        ksize = [1024, 2048, 4096, 8192]
        blksize = random.choice(ksize)

    if len(args) >= 2 :
        count = int(args[1])
        ksize = [1024, 2048, 4096, 8192]
        blksize = random.choice(ksize)

    if len(args) >= 3:
        blksize = int(args[2])

    logger.debug("start: " + str(count) + " data blocks of " + str(blksize));
    for c in range(0,count):
        databuf = os.urandom(blksize)
        hash_sha256 = hashlib.sha256()
        hash_sha256.update(databuf)
        sig = hash_sha256.hexdigest()

        # write the data block as a file
        fname = root + "/" + str(sig)
        fh = open(fname, "wb")
        fh.write(databuf)
        fh.close()
  
        # read back the data block file
        fh = open(fname, "rb")
        dbuf = fh.read()
        fh.close()

        # compare the SHA256 signatures and make sure they match 
        hash_sha256_r = hashlib.sha256()
        hash_sha256_r.update(databuf)
        rsig = hash_sha256_r.hexdigest()

        if sig != rsig:
            logger.error("Mismatch: " + str(sig) + "\t" + str(rsig))
            return -1;
        os.remove(fname)
        logger.debug("end: " + str(count) + " data blocks of " + str(blksize));
    return 0

VDBENCH="/diobench/vdbench/vdbench"
def vdb_io(args):
    if len(args) < 2:
        logger.error("vdbench </fsname> <testname>")
        return -1
    root = args[0]
    #TODO: Check if this is a valid mountpoint
    vdbtest = args[1]
    vtestfile = "/diobench/vdbrun/" + vdbtest + ".vdb"
    if not os.path.isfile(vtestfile):
        logger.error(vtestfile + " not found")
        return -1
    os.chdir(root)
    vdbcmd = [ VDBENCH, "-f" , vtestfile ]
    return subprocess.call(vdbcmd)

FIO="/usr/local/bin/fio"
def fio_io(args):
    if len(args) < 2:
        logger.error("fio </fsname> <testname>")
        return -1
    root = args[0]
    #TODO: Check if this is a valid mountpoint
    fiotest = args[1]
    ftestfile = "/diobench/fiorun/" + fiotest + ".fio" 
    if not os.path.isfile(ftestfile):
        logger.error(ftestfile + " not found")
        return -1
    os.chdir(root)
    fiocmd = [ FIO, ftestfile ]
    return subprocess.call(fiocmd)


def command(cmd, args):
    retval = -1
    if cmd == "hello":
        retval = hello_io(args)
    elif cmd == "vdb":
        retval = vdb_io(args)
    elif cmd == "fio":
        retval = fio_io(args)
    else:
        print("Unknown command: " + cmd)
    return retval

def main():
    parser = argparse.ArgumentParser(
                description="data io benchmark tests",
                epilog="run popular io benchmark tests")

    parser.add_argument('-d', '--debug', type=int, help='debug value', required=False)
    parser.add_argument("--hello", help="hello", nargs=argparse.REMAINDER)
    parser.add_argument("--vdb", help="vdbench", nargs=argparse.REMAINDER)
    parser.add_argument("--fio", help="FIO", nargs=argparse.REMAINDER)

    results = parser.parse_args()

    DEBUG_LEVEL=5
    if results.debug != DEBUG_LEVEL:
        DEBUG_LEVEL = results.debug

    if DEBUG_LEVEL == 0:
        log_format = '%(color)s[%(levelname)1.1s %(asctime)s \
                      %(module)s:%(lineno)d]%(end_color)s %(message)s'
        logfile = sys.argv[0] + ".log"
        logzero.logfile(logfile, maxBytes=1048576, backupCount=3, \
                        loglevel=logging.DEBUG, formatter=log_format)
        formatter = logzero.LogFormatter(fmt=log_format)
        logzero.setup_default_logger(level=logging.DEBUG, formatter=formatter)
    else:
        log_format = '%(message)s'
        formatter = logzero.LogFormatter(fmt=log_format)
        logzero.setup_default_logger(level=logging.INFO, formatter=formatter)


    if results.hello is not None:
        cmd = "hello"
        args = results.hello
        logger.info("hello start " + str(args))
        r = command(cmd, args)
        logger.info("hello end")
        sys.exit(r)

    if results.vdb is not None:
        cmd = "vdb"
        args = results.vdb
        logger.info("vdb start " + str(args))
        r = command(cmd, args)
        logger.info("vdb end")
        sys.exit(r)

    if results.fio is not None:
        cmd = "fio"
        args = results.fio
        logger.info("fio start " + str(args))
        r = command(cmd, args)
        logger.info("fio end")
        sys.exit(r)

    parser.print_help()

if __name__ == "__main__":
        main()
